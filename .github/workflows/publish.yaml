name: publish

on: workflow_dispatch

env:
  NODEJS_VERSION: "20.5.1"
  RUST_VERSION: "1.82.0"
  GITHUB_TOKEN: ${{ secrets.FONTS_PAT }}
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
  APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

jobs:
  linux:
    name: Create build for Linux
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.FONTS_PAT }}
          submodules: "recursive"
      - name: Install system dependencies
        run: |
          sudo apt install -y --no-install-recommends build-essential libssl-dev zlib1g-dev libffi-dev libbz2-dev libreadline-dev libsqlite3-dev liblzma-dev libncurses-dev tk-dev libwebkit2gtk-4.0-dev curl wget file libgtk-3-dev librsvg2-dev ca-certificates software-properties-common patchelf libasound2-dev libglib2.0-dev libgtk-3-dev libsoup-3.0-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          components: rustfmt, clippy
      - name: Build frontend
        run: |
          npm install -g pnpm
          make svelte
      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        with:
          tagName: v__VERSION__
          releaseName: "Release v__VERSION__"
          releaseDraft: true
          prerelease: false
  mac:
    name: Create signed build for Mac OS
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.FONTS_PAT }}
          submodules: "recursive"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          components: rustfmt, clippy
      - name: Prepare remaining dependencies
        run: |
          brew install python-setuptools cairo pango
          pkg-config --atleast-version=1.12.2 cairo
          export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:/usr/X11/lib/pkgconfig/"
          npm install -g pnpm
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
      - name: Build frontend and backend
        run: make svelte rust
      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        with:
          tagName: v__VERSION__
          releaseName: "Release v__VERSION__"
          releaseDraft: true
          prerelease: false
          args: --target universal-apple-darwin
  windows:
    name: Create build for Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.FONTS_PAT }}
          submodules: "recursive"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_VERSION }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          override: true
          components: rustfmt, clippy
      - name: Setup frontend dependencies
        run: |
          npm install -g pnpm
          pnpm install
          pnpm compile
        working-directory: forks/neodrag
      - name: Build frontend
        run: |
          yarn install
          yarn svelte-kit sync
          yarn build
        working-directory: src-svelte
      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        with:
          tagName: v__VERSION__
          releaseName: "Release v__VERSION__"
          releaseDraft: true
          prerelease: false
